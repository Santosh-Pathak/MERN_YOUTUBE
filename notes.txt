***********************************************CORS(Cross Orgin Resources Sharing)*****************************************************

If you don’t use CORS (Cross-Origin Resource Sharing) in your Express app, the browser will block requests from different origins (domains)
 due to the same-origin policy
 Requests from different origins (e.g., http://localhost:3000 → http://localhost:8000) are considered cross-origin.
 Consequences of Not Using CORS
Requests Will Fail in the Browser If your frontend (e.g., React at http://localhost:3000) tries to fetch data from an Express server (http://localhost:8000)
 without CORS, the browser blocks the request.

 NOTE  : Postman or Curl Works, But Not Browsers Tools like Postman or cURL bypass browser policies, so requests will work as expected. However, 
 these are not practical for end-users.

 const cors = require("cors");
app.use(cors());

*****CORS Alternatives (Workarounds)******
PROXY => The concept of a proxy in web development refers to an intermediary that acts on behalf of one party (e.g., a client) to interact with another party
 (e.g., a server). A proxy server forwards requests from the client to the target server and then relays the server's response back to the client.

Proxies are commonly used to solve cross-origin issues, improve security, enhance performance, or manage traffic.

The concept of a proxy in web development refers to an intermediary that acts on behalf of one party (e.g., a client) to interact with another party (e.g., a server). A proxy server forwards requests from the client to the target server and then relays the server's response back to the client.

Proxies are commonly used to solve cross-origin issues, improve security, enhance performance, or manage traffic.

***Types of Proxies***
1=> Forward Proxy:
The proxy server acts on behalf of a client.
Commonly used to mask client IPs, restrict access, or cache data.
Example: A company's proxy server filtering employee web traffic.

2=>Reverse Proxy:
The proxy server acts on behalf of a server.
Commonly used for load balancing, SSL termination, or caching.
Example: Nginx as a reverse proxy for multiple backend services.
Proxy in Web Development
In web development, proxies are often used to bypass restrictions or simplify communication between a frontend and a backend during development.

Problem Example: Cross-Origin Restrictions
Imagine a React frontend running on http://localhost:3000 making API requests to a backend running on http://localhost:8000. The browser will block these requests due to the same-origin policy.

Solution: Use a Proxy

How Proxy Solves Cross-Origin Issues
Frontend Proxy Setup in React:
The React development server (via create-react-app) allows you to set up a proxy to forward requests during development.

Configuration: Add a proxy entry in the package.json of your React app:

(package.json)
Copy code
{
  "proxy": "http://localhost:8000"
}
This means that any API request made from React (/api/v1/users) will be forwarded to http://localhost:8000/api/v1/users.



**********************************************************************MIDDLEWARES****************************************************************************
Middleware is a function that has access to the request object (req), the response object (res),
and the next middleware function in the application’s request-response cycle. The next middleware function is commonly d
efined within a middleware function as a variable named “next”, which is a function that executes the next
middleware function. When the end of the middleware stack has been reached, call the next() function to
pass control to the final destination (usually a route handler).

    1=>JSON Parsing Middleware:
        app.use(express.json({ limit: "10kb" }));
        The limit of "10kb" prevents excessively large payloads to avoid performance issues.
        app.use(express.json());
        Parses incoming JSON payloads and makes them available in req.body.


            {

                    Example: If a POST request contains this body:
                    json
                    { "name": "Alice", "age": 25 }"

                    You can access it in req.body as:
                    javascript
                    console.log(req.body.name); // Outputs "Alice"
            }

    2=> app.use(cookieParser());


        Parses incoming cookies and makes them available via req.cookies.
        Useful for session management or authentication.
        Example: If a client sends this header:


        Cookie: sessionId=abc123
        You can access it in req.cookies:

        javascript
        console.log(req.cookies.sessionId); // Outputs "abc123"


************************************************************CONNECTION TO MONGODB (DATABASE)******************************************
import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

const connectDB = async () => {
  try {
    const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
    // console.log(`Connecting to MongoDB: ${process.env.MONGODB_URI}/${DB_NAME}`);
    console.log(`MongoDB Connected: ${connectionInstance.connection.host}`);

  } catch (error) {
    console.log("MongoDB Connection Error: ", error);
    process.exit(1); // Exit process with failure
  }
};

export default connectDB;

******************************************************ACCESS AND REFRESH TOKENS*****************************************************


1. **User Authentication**:
   - When a user logs in or authenticates, the authentication server verifies the user's credentials (e.g., username and password).
   - After successful authentication, the server issues:
     - An **access token** for immediate use in accessing APIs.
     - A **refresh token** for obtaining new access tokens in the future without requiring the user to log in again.

2. **API Requests**:
   - The client (e.g., a mobile app or web app) uses the **access token** to make requests to protected APIs.
   - The access token is included in the request headers (commonly in the `Authorization` header as a Bearer token).

3. **Token Expiry**:
   - Access tokens are intentionally short-lived (to reduce the impact of token theft).
   - When the access token expires, the client no longer has valid credentials to access protected resources.
   - Instead of asking the user to log in again, the client uses the **refresh token** to request a new access token.

4. **Token Renewal**:
   - The client sends the refresh token to the authentication server.

   - The authentication server verifies the refresh token:
     - If valid, it issues a new access token (and possibly a new refresh token, depending on the implementation).
     - If invalid (e.g., revoked or expired), the user is prompted to log in again.

******************************************************JSON web Tokens*****************************************************

JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting 
information between parties as a JSON object.
What is the JSON Web Token structure?
In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:
Header
Payload
Signature

Therefore, a JWT typically looks like the following.
xxxxx.yyyyy.zzzzz

***Header
The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, 
such as HMAC SHA256 or RSA.
For example:
{
  "alg": "HS256",
  "typ": "JWT"
}
Then, this JSON is Base64Url encoded to form the first part of the JWT.

***Payload
The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically,
 the user) and additional data. There are three types of claims: registered, public, and private claims.
Registered claims: These are a set of predefined claims which are not mandatory but recommended, to provide a set of useful,
 interoperable claims. Some of them are: iss (issuer), exp (expiration time), sub (subject), aud (audience), and others.
Notice that the claim names are only three characters long as JWT is meant to be compact.
Public claims: These can be defined at will by those using JWTs. But to avoid collisions they should be defined in the 
IANA JSON Web Token Registry or be defined as a URI that contains a collision resistant namespace.
Private claims: These are the custom claims created to share information between parties that agree on using them and are
 neither registered or public claims.
An example payload could be:
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}
The payload is then Base64Url encoded to form the second part of the JSON Web Token.
Do note that for signed tokens this information, though protected against tampering, is readable by anyone. Do not put secret
 information in the payload or header elements of a JWT unless it is encrypted.

***Signature
To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.

For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)
The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it 
can also verify that the sender of the JWT is who it says it is.