***********************************************CORS(Cross Orgin Resources Sharing)*****************************************************

If you don’t use CORS (Cross-Origin Resource Sharing) in your Express app, the browser will block requests from different origins (domains)
 due to the same-origin policy
 Requests from different origins (e.g., http://localhost:3000 → http://localhost:8000) are considered cross-origin.
 Consequences of Not Using CORS
Requests Will Fail in the Browser If your frontend (e.g., React at http://localhost:3000) tries to fetch data from an Express server (http://localhost:8000)
 without CORS, the browser blocks the request.

 NOTE  : Postman or Curl Works, But Not Browsers Tools like Postman or cURL bypass browser policies, so requests will work as expected. However, 
 these are not practical for end-users.

 const cors = require("cors");
app.use(cors());

*****CORS Alternatives (Workarounds)******
PROXY => The concept of a proxy in web development refers to an intermediary that acts on behalf of one party (e.g., a client) to interact with another party
 (e.g., a server). A proxy server forwards requests from the client to the target server and then relays the server's response back to the client.

Proxies are commonly used to solve cross-origin issues, improve security, enhance performance, or manage traffic.

The concept of a proxy in web development refers to an intermediary that acts on behalf of one party (e.g., a client) to interact with another party (e.g., a server). A proxy server forwards requests from the client to the target server and then relays the server's response back to the client.

Proxies are commonly used to solve cross-origin issues, improve security, enhance performance, or manage traffic.

***Types of Proxies***
1=> Forward Proxy:
The proxy server acts on behalf of a client.
Commonly used to mask client IPs, restrict access, or cache data.
Example: A company's proxy server filtering employee web traffic.

2=>Reverse Proxy:
The proxy server acts on behalf of a server.
Commonly used for load balancing, SSL termination, or caching.
Example: Nginx as a reverse proxy for multiple backend services.
Proxy in Web Development
In web development, proxies are often used to bypass restrictions or simplify communication between a frontend and a backend during development.

Problem Example: Cross-Origin Restrictions
Imagine a React frontend running on http://localhost:3000 making API requests to a backend running on http://localhost:8000. The browser will block these requests due to the same-origin policy.

Solution: Use a Proxy

How Proxy Solves Cross-Origin Issues
Frontend Proxy Setup in React:
The React development server (via create-react-app) allows you to set up a proxy to forward requests during development.

Configuration: Add a proxy entry in the package.json of your React app:

(package.json)
Copy code
{
  "proxy": "http://localhost:8000"
}
This means that any API request made from React (/api/v1/users) will be forwarded to http://localhost:8000/api/v1/users.



**********************************************************************MIDDLEWARES****************************************************************************
Middleware is a function that has access to the request object (req), the response object (res),
and the next middleware function in the application’s request-response cycle. The next middleware function is commonly d
efined within a middleware function as a variable named “next”, which is a function that executes the next
middleware function. When the end of the middleware stack has been reached, call the next() function to
pass control to the final destination (usually a route handler).

    1=>JSON Parsing Middleware:
        app.use(express.json({ limit: "10kb" }));
        The limit of "10kb" prevents excessively large payloads to avoid performance issues.
        app.use(express.json());
        Parses incoming JSON payloads and makes them available in req.body.


            {

                    Example: If a POST request contains this body:
                    json
                    { "name": "Alice", "age": 25 }"

                    You can access it in req.body as:
                    javascript
                    console.log(req.body.name); // Outputs "Alice"
            }

    2=> app.use(cookieParser());


        Parses incoming cookies and makes them available via req.cookies.
        Useful for session management or authentication.
        Example: If a client sends this header:


        Cookie: sessionId=abc123
        You can access it in req.cookies:

        javascript
        console.log(req.cookies.sessionId); // Outputs "abc123"


************************************************************CONNECTION TO MONGODB (DATABASE)******************************************
import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

const connectDB = async () => {
  try {
    const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
    // console.log(`Connecting to MongoDB: ${process.env.MONGODB_URI}/${DB_NAME}`);
    console.log(`MongoDB Connected: ${connectionInstance.connection.host}`);

  } catch (error) {
    console.log("MongoDB Connection Error: ", error);
    process.exit(1); // Exit process with failure
  }
};

export default connectDB;
